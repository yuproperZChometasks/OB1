"""
*Дополнительное задание:
Ты разрабатываешь программное обеспечение для сети магазинов. Каждый магазин в этой сети имеет свои особенности, но также существуют общие характеристики, такие как адрес, название и ассортимент товаров. Ваша задача — создать класс Store, который можно будет использовать для создания различных магазинов.
Шаги:

1. Создай класс Store:

-Атрибуты класса:

    name: название магазина.
    address: адрес магазина.
    items: словарь, где ключ - название товара, а значение - его цена. Например, {'apples': 0.5, 'bananas': 0.75}.

Методы класса:

    init - конструктор, который инициализирует название и адрес, а также пустой словарь для items`.
-  метод для добавления товара в ассортимент.
    метод для удаления товара из ассортимента.
    метод для получения цены товара по его названию. Если товар отсутствует, возвращайте None.
    метод для обновления цены товара.

2. Создай несколько объектов класса Store:
Создай не менее трех различных магазинов с разными названиями, адресами и добавь в каждый из них несколько товаров.

3. Протестировать методы:
Выбери один из созданных магазинов и протестируй все его методы: добавь товар, обнови цену, убери товар и запрашивай цену.
В поле для ответа загрузи ссылку на GitHub-репозиторий, содержащий код проекта с реализацией задания.
Вот пример реализации класса `Store`, а также создание нескольких объектов и их тестирование. Я предоставлю код, который вы можете использовать для выполнения задания. 
"""

class Store:
    def __init__(self, name, address):
        self.name = name
        self.address = address
        self.items = {}

    def add_item(self, item_name, price):
        self.items[item_name] = price

    def remove_item(self, item_name):
        if item_name in self.items:
            del self.items[item_name]

    def get_price(self, item_name):
        return self.items.get(item_name, None)

    def update_price(self, item_name, new_price):
        if item_name in self.items:
            self.items[item_name] = new_price


# Создание нескольких объектов класса Store
store1 = Store("Магазин на углу", "Улица 1, дом 1")
store1.add_item("яблоки", 0.5)
store1.add_item("бананы", 0.75)

store2 = Store("Магазин у парка", "Улица 2, дом 2")
store2.add_item("хлеб", 1.0)
store2.add_item("молоко", 1.5)

store3 = Store("Магазин у метро", "Улица 3, дом 3")
store3.add_item("кофе", 2.0)
store3.add_item("чай", 1.8)

# Тестирование методов на первом магазине
print(f"Товары в {store1.name}: {store1.items}")

# Добавление товара
store1.add_item("груши", 0.6)
print(f"Товары в {store1.name} после добавления груш: {store1.items}")

# Обновление цены товара
store1.update_price("бананы", 0.8)
print(f"Цены в {store1.name} после обновления цены бананов: {store1.items}")

# Удаление товара
store1.remove_item("яблоки")
print(f"Товары в {store1.name} после удаления яблок: {store1.items}")

# Запрос цены товара
price_of_bananas = store1.get_price("бананы")
print(f"Цена бананов в {store1.name}: {price_of_bananas}")

# Запрос цены отсутствующего товара
price_of_apples = store1.get_price("яблоки")
print(f"Цена яблок в {store1.name}: {price_of_apples}")  # Ожидается None

"""
### Инструкция по загрузке на GitHub:
1. Создайте новый репозиторий на GitHub.
2. Клонируйте репозиторий на свой компьютер.
3. Создайте файл (например, `store.py`) и вставьте в него указанный выше код.
4. Закоммитьте изменения и отправьте их на удалённый репозиторий:
   ```bash
   git add store.py
   git commit -m "Добавлен класс Store с тестированием"
   git push origin main

```
5. Поделитесь ссылкой на ваш репозиторий.
"""
